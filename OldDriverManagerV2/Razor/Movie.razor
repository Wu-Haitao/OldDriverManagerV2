<MudContainer Class="py-8" MaxWidth="MaxWidth.Small">
    @if (img_urls.Count > 0)
    {
        <MudPaper Class="mt-4" Elevation="3">
            <MudCarousel Class="mud-width-full rounded" TData="object" Style="height:400px" ShowArrows=false>
            @foreach (string img_url in img_urls)
            {
                <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary">
                        <MudImage Fluid="true" Src="@img_url" ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Contain" Style="@(Settings.Default.IsImgBlured? "filter:blur(12px);width:100%; height:100%;":"width:100%; height:100%;")" />
                </MudCarouselItem>
            }
        </MudCarousel>
        </MudPaper>
    }
    <MudPaper Class="pa-8 mt-4" Elevation="3">
        @if (movie != null)
        {
            <MudText Typo="Typo.h6">@movie.title</MudText>
            <MudDivider Class="my-4"/>
            <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" /> @movie.num</MudText>
            <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Sell" Size="Size.Small" /> @movie.seller</MudText>
            <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Link" Size="Size.Small" /> <MudLink Href="@movie.website">链接</MudLink></MudText>
            @if (movie.tags.Count > 0)
            {
                <MudDivider Class="my-4" />
                @foreach (string _tag in movie.tags)
                {
                    <MudChip Variant="Variant.Text" Color="Color.Primary" OnClick="@((e)=>OnCopyClicked(_tag))">@_tag</MudChip>
                }
            }
            <MudDivider Class="my-4" />
            <MudButton Class="mb-2" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="@((e)=>OnPlayClicked(movie_index))">播放</MudButton>
            <MudButton Class="mb-2" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.DriveFileMove" OnClick="@((e)=>OnOpenPathClicked(movie_index))">打开文件所在路径</MudButton>
            <MudButton Class="mb-2" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.EditNote" OnClick="@((e)=>OnOpenNFOClicked(movie_index, movie.nfo))">编辑属性文件</MudButton>
            <MudButton Class="mb-2" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Delete" OnClick="@((e)=>OnDeleteNFOClicked(movie_index, movie.nfo))">删除属性文件</MudButton>

        }
    </MudPaper>

</MudContainer>

@using OldDriverManagerV2.Util
@inject ISnackbar Snackbar

@code {
    OldDriverManagerV2.Data.Movie? _movie; //随机模式下强制刷新
    [Parameter]
    public OldDriverManagerV2.Data.Movie? movie { set; get; }
    [Parameter]
    public int movie_index { set; get; }

    protected override async Task OnParametersSetAsync()
    {
        if (movie == _movie) return;
        else _movie = movie;

        await RefreshPage();
    }

    protected override void OnInitialized()
    {
        Init();
    }

    private void Init()
    {
        System.Diagnostics.Debug.WriteLine("Movie init!");
        InitSnackbar();
    }

    private void InitSnackbar()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.ShowTransitionDuration = 200;
        Snackbar.Configuration.HideTransitionDuration = 200;
        Snackbar.Configuration.VisibleStateDuration = 800;
        Snackbar.Configuration.SnackbarVariant = Variant.Text;
        Snackbar.Configuration.PreventDuplicates = true;
    }

    private void OnCopyClicked(string tag)
    {
        try
        {
            System.Windows.Clipboard.SetText(tag);
            Snackbar.Add("标签内容已复制", Severity.Success, config => { config.HideIcon = true; });
        }
        catch
        {
            Snackbar.Add("请勿重复点击！", Severity.Error, config => { config.HideIcon = true; });
        }
    }

    private void OnPlayClicked(string path)
    {
        bool flag = MovieListHandler.PlayMovie(path);
        if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
    }
    private void OnPlayClicked(int index)
    {
        bool flag = MovieListHandler.PlayMovie(index);
        if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
    }

    private void OnOpenPathClicked(string path)
    {
        bool flag = MovieListHandler.OpenPathOfMovie(path);
        if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
    }
    private void OnOpenPathClicked(int index)
    {
        bool flag = MovieListHandler.OpenPathOfMovie(index);
        if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
    }

    private void OnOpenNFOClicked(int index, string path)
    {
        bool flag = MovieListHandler.OpenNFO(index, path);
        if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
        /*else {
            movie = MovieListHandler.movies[movie_index];
            await RefreshPage();
            Snackbar.Add("文件已修改", Severity.Success, config => { config.HideIcon = true; });
        }*/
    }

    private void OnDeleteNFOClicked(int index, string path)
    {
        bool flag = MovieListHandler.DeleteNFO(index, path);
        if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
        else Snackbar.Add("文件已删除", Severity.Success, config => { config.HideIcon = true; });
    }

    private async Task RefreshPage()
    {
        System.Diagnostics.Debug.WriteLine("Movie refresh!");
        await LoadLocalImage();
        StateHasChanged();
    }

    private List<string> img_urls = new();
    private async Task LoadLocalImage()
    {
        if (movie == null) return;
        List<string> img_paths = MovieListHandler.GetImgForMovie(movie);
        img_urls.Clear();
        await LocalImageLoader.RevokeAll(1);
        if (img_paths.Count == 0) img_urls.Add(await LocalImageLoader.GenerateImgUrl(movie.cover, 1));
        foreach (string img_path in img_paths)
        {
            img_urls.Add(await LocalImageLoader.GenerateImgUrl(img_path, 1));
        }
    }
}
