<MudContainer Class="py-8" MaxWidth="MaxWidth.Small">
    @if (img_urls.Count > 0)
    {
        <MudPaper Class="mt-4" Elevation="3">
            <MudCarousel Class="mud-width-full rounded" TData="object" Style="height:400px" ShowArrows=true ShowBullets=false>
            @foreach (string img_url in img_urls)
            {
                <MudCarouselItem Transition="Transition.Fade">
                        <MudImage Src="@img_url" ObjectPosition="ObjectPosition.Center" ObjectFit="ObjectFit.Contain" Style="@(Settings.Default.IsImgBlured? "filter:blur(12px); width:100%; height:100%;":"width:100%; height:100%;")" />
                </MudCarouselItem>
            }
        </MudCarousel>
        </MudPaper>
    }
    <MudPaper Class="pa-8 mt-4" Elevation="3">
        @if (movie != null)
        {
            <MudText Typo="Typo.h6">@movie.title</MudText>
            <MudDivider Class="my-4"/>
            <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" /> @movie.num</MudText>
            @if (movie.seller != "")
            {
                <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Sell" Size="Size.Small" /> @movie.seller</MudText>
            }
            <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Link" Size="Size.Small" /> <MudLink Href="@movie.website">链接</MudLink></MudText>
            @if (movie.casts.Count > 0)
            {
                <MudDivider Class="my-4" />
                @foreach (string _cast in movie.casts)
                {
                    <MudChip Variant="Variant.Text" OnClick="@((e)=>OnCopyClicked(_cast))">@_cast</MudChip>
                }
            }
            @if (movie.tags.Count > 0)
            {
                <MudDivider Class="my-4" />
                @foreach (string _tag in movie.tags)
                {
                    <MudChip Variant="Variant.Text" OnClick="@((e)=>OnCopyClicked(_tag))">@_tag</MudChip>
                }
            }
            <MudDivider Class="my-4" />
            <MudButton Class="mb-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PlayArrow" OnClick="@((e)=>OnPlayClicked(movie))">播放</MudButton>
            <MudButton Class="mb-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DriveFileMove" OnClick="@((e)=>OnOpenPathClicked(movie))">打开文件所在路径</MudButton>
            <MudButton Class="mb-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.EditNote" OnClick="@((e)=>OnOpenNFOClicked(movie.nfo))">打开属性文件所在路径</MudButton>
            <style>
                .my-dialog-class {
                    backdrop-filter: blur(10px);
                }
            </style>

        }
    </MudPaper>

</MudContainer>

@using OldDriverManagerV2.Util
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@implements IAsyncDisposable

@code {
    private OldDriverManagerV2.Data.Movie? _movie;
    [Parameter]
    public OldDriverManagerV2.Data.Movie? movie { set; get; }
    private List<string> img_urls = new();

    protected override async Task OnParametersSetAsync()
    {
        if (_movie == movie) return;
        await UnloadLocalImage(_movie);
        _movie = movie;
        await LoadLocalImage(movie);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Init();
    }

    private void Init()
    {
        System.Diagnostics.Debug.WriteLine("Movie Initialization");
        InitSnackbar();
    }

    private void InitSnackbar()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        Snackbar.Configuration.ShowTransitionDuration = 200;
        Snackbar.Configuration.HideTransitionDuration = 200;
        Snackbar.Configuration.VisibleStateDuration = 800;
        Snackbar.Configuration.SnackbarVariant = Variant.Text;
        Snackbar.Configuration.PreventDuplicates = true;
    }

    // 点击复制
    private void OnCopyClicked(string tag)
    {
        try
        {
            System.Windows.Clipboard.SetText(tag);
            Snackbar.Add("标签内容已复制", Severity.Success, config => { config.HideIcon = true; });
        }
        catch
        {
            Snackbar.Add("请勿重复点击！", Severity.Error, config => { config.HideIcon = true; });
        }
    }

    // 点击播放
    private void OnPlayClicked(OldDriverManagerV2.Data.Movie movieToBePlayed)
    {
        if (movieToBePlayed.files.Count > 1)
        {
            var options = new DialogOptions { ClassBackground = "my-dialog-class" };
            var parameters = new DialogParameters<FileSelection>();
            parameters.Add(x => x.files, movieToBePlayed.files);
            parameters.Add(x => x.isToPlay, true);
            DialogService.Show<FileSelection>("文件选择", parameters, options);
        }
        else
        {
            bool flag = MovieListHandler.PlayMovie(movieToBePlayed.files[0]);
            if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
        }
    }

    // 点击打开文件路径
    private void OnOpenPathClicked(OldDriverManagerV2.Data.Movie movieToBeOpened)
    {
        if (movieToBeOpened.files.Count > 1)
        {
            var options = new DialogOptions { ClassBackground = "my-dialog-class" };
            var parameters = new DialogParameters<FileSelection>();
            parameters.Add(x => x.files, movieToBeOpened.files);
            parameters.Add(x => x.isToPlay, false);
            DialogService.Show<FileSelection>("文件选择", parameters, options);
        }
        else
        {
            bool flag = MovieListHandler.OpenPath(movieToBeOpened.files[0]);
            if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
        }
    }

    // 点击打开 NFO 文件路径
    private void OnOpenNFOClicked(string path)
    {
        bool flag = MovieListHandler.OpenPath(path);
        if (!flag) Snackbar.Add("文件不存在", Severity.Error, config => { config.HideIcon = true; });
    }

    private async Task LoadLocalImage(OldDriverManagerV2.Data.Movie? movie_load)
    {
        if (movie_load == null) return;
        List<string> img_paths = MovieListHandler.GetImgForMovie(movie_load);
        img_urls.Clear();
        await Task.Delay(50); // Not elegant but is working
        foreach (string img_path in img_paths)
        {
            img_urls.Add(await LocalImageLoader.GenerateImgUrl(img_path));
        }
    }

    private async Task UnloadLocalImage(OldDriverManagerV2.Data.Movie? movie_unload)
    {
        if (movie_unload == null) return;
        List<string> img_paths = MovieListHandler.GetImgForMovie(movie_unload);
        img_urls.Clear();
        foreach (string img_path in img_paths)
        {
            await LocalImageLoader.RevokePath(img_path);
        }
    }

    public async System.Threading.Tasks.ValueTask DisposeAsync()
    {
        await UnloadLocalImage(movie);
    }
}
